const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const session = require('express-session');
const multer = require('multer');
const path = require('path');
const axios = require('axios');
const { body, validationResult } = require('express-validator');
const app = express();
const port = process.env.PORT || 3001;
const db = require('./db');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const fs = require('fs');
const nodemailer = require('nodemailer');
const crypto = require('crypto');
const Razorpay = require('razorpay');

// Load environment variables
require('dotenv').config();

// Initialize Razorpay
const razorpay = new Razorpay({
  key_id: process.env.RAZORPAY_KEY_ID,
  key_secret: process.env.RAZORPAY_KEY_SECRET
});

// Validate Razorpay configuration
if (!process.env.RAZORPAY_KEY_ID || !process.env.RAZORPAY_KEY_SECRET) {
  console.error('Razorpay credentials are missing');
  process.exit(1);
}

const API_URL = process.env.API_URL || 'http://localhost:3001';

// CORS configuration
app.use(cors({
  origin: true,
  credentials: true
}));

app.use(express.json());

// Configure multer for file uploads
const storage = multer.diskStorage({
  destination: function(req, file, cb) {
    cb(null, 'uploads/');
  },
  filename: function(req, file, cb) {
    cb(null, Date.now() + path.extname(file.originalname));
  }
});

const upload = multer({ storage });

// Admin code middleware
const checkAdminCode = (req, res, next) => {
  const adminCode = req.query.adminCode || req.body.adminCode;
  if (adminCode !== process.env.ADMIN_CODE) {
    return res.status(401).json({ error: 'Invalid admin code' });
  }
  next();
};

// Create order endpoint with Razorpay integration
app.post('/api/orders', [
  body('customer_email').isEmail().normalizeEmail().withMessage('Invalid email'),
  body('customer_name').notEmpty().trim().escape().withMessage('Customer name is required'),
  body('customer_phone').notEmpty().trim().withMessage('Customer phone is required'),
  body('items').isArray({ min: 1 }).withMessage('At least one item is required'),
  body('shipping_address').notEmpty().withMessage('Shipping address is required'),
  body('total_amount').isFloat({ min: 0.01 }).withMessage('Total amount must be greater than 0'),
  body('payment_id').notEmpty().withMessage('Payment ID is required'),
  body('order_id').notEmpty().withMessage('Order ID is required')
], async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  const { 
    items, 
    shipping_address, 
    customer_name, 
    customer_email, 
    customer_phone, 
    total_amount,
    payment_id,
    order_id
  } = req.body;

  const client = await db.connect();

  try {
    await client.query('BEGIN');

    // Insert order details
    const orderResult = await client.query(
      `INSERT INTO orders (
        customer_email, 
        customer_name, 
        customer_phone, 
        shipping_address, 
        total_amount, 
        payment_status,
        payment_id,
        razorpay_order_id
      )
      VALUES ($1, $2, $3, $4, $5, 'completed', $6, $7) 
      RETURNING order_id`,
      [
        customer_email,
        customer_name,
        customer_phone,
        JSON.stringify(shipping_address),
        total_amount,
        payment_id,
        order_id
      ]
    );

    const orderId = orderResult.rows[0].order_id;

    // Insert order items
    for (const item of items) {
      await client.query(
        `INSERT INTO order_items (order_id, book_id, quantity, price)
        VALUES ($1, $2, $3, $4)`,
        [orderId, item.book_id, item.quantity, item.price]
      );
    }

    await client.query('COMMIT');

    res.status(201).json({
      success: true,
      order_id: orderId,
      message: 'Order created successfully'
    });

  } catch (error) {
    await client.query('ROLLBACK');
    console.error('Error creating order:', error);
    res.status(500).json({ success: false, error: 'Failed to create order' });
  } finally {
    client.release();
  }
});

// Razorpay Create Order endpoint
app.post('/api/create-razorpay-order', async (req, res) => {
  try {
    const { amount, currency = 'INR', receipt } = req.body;

    const options = {
      amount: amount * 100, // Razorpay expects amount in paise
      currency,
      receipt,
      payment_capture: 1
    };

    const order = await razorpay.orders.create(options);
    res.json({
      success: true,
      order
    });
  } catch (error) {
    console.error('Error creating Razorpay order:', error);
    res.status(500).json({
      success: false,
      error: 'Error creating order'
    });
  }
});

// Razorpay Payment Verification endpoint
app.post('/api/verify-razorpay-payment', async (req, res) => {
  try {
    const {
      orderCreationId,
      razorpayPaymentId,
      razorpayOrderId,
      razorpaySignature,
    } = req.body;

    const shasum = crypto.createHmac('sha256', process.env.RAZORPAY_KEY_SECRET);
    shasum.update(`${orderCreationId}|${razorpayPaymentId}`);
    const digest = shasum.digest('hex');

    if (digest !== razorpaySignature) {
      return res.status(400).json({
        success: false,
        error: 'Transaction not legit!'
      });
    }

    res.json({
      success: true,
      message: 'Payment has been verified'
    });
  } catch (error) {
    console.error('Error verifying Razorpay payment:', error);
    res.status(500).json({
      success: false,
      error: 'Error verifying payment'
    });
  }
});

// Debug middleware for sessions
app.use((req, res, next) => {
  console.log('Session Debug:', {
    sessionID: req.sessionID,
    session: req.session
  });
  next();
});

// Start the server
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
